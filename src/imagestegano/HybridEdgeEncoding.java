/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imagestegano;

import com.drew.imaging.ImageMetadataReader;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.Tag;
import static imagestegano.ImageStegano.getGrayScale;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import static java.awt.image.ImageObserver.HEIGHT;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import static java.lang.System.in;
import java.math.BigInteger;
import java.nio.file.Files;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import steganography.CannyEdgeDetector;
import steganography.EdgeDetection;
import steganography.JCanny;
import utility.ImageUtility;

/**
 *
 * @author user
 */
public class HybridEdgeEncoding extends javax.swing.JFrame {

    
    BufferedImage originalImage;
    BufferedImage currentImage;
   
    //Canny parameters
    private static final double CANNY_THRESHOLD_RATIO = .2; //Suggested range .2 - .4
    private static final int CANNY_STD_DEV = 1;             //Range 1-3
    
     JFileChooser fileChooser;
    File textFile;
    BufferedImage coverImage;
    ImageUtility imageUtility;
    ColorModel coverImageColorModel;
    File openedFile;
     BufferedImage edges;
     boolean cannyEdge,sobelEdge;
       String edgeMask ="";
        CannyEdgeDetector cannyEdgeDetector = new CannyEdgeDetector();
    /**
     * Creates new form HybridEdgeEncoding
     */
    public HybridEdgeEncoding() {
        initComponents();
         fileChooser = new JFileChooser();
        imageUtility = new ImageUtility();
         //currentImage = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        imageLabel = new javax.swing.JLabel();
        imageLabel1 = new javax.swing.JLabel();
        imageLabel2 = new javax.swing.JLabel();
        imageLabel3 = new javax.swing.JLabel();
        imageLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chooseTextFileButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        secretMessageTextFiled = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        chooseCoverImageButton = new javax.swing.JButton();
        hideTextButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        textFileLabel = new javax.swing.JLabel();
        coverImageLabel = new javax.swing.JLabel();
        hybridImageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        jFrame1.setMinimumSize(new java.awt.Dimension(995, 676));

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        imageLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        imageLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        imageLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        imageLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(imageLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(imageLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(imageLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118)
                        .addComponent(imageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(imageLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );

        setResizable(false);

        jLabel2.setText("Choose a text File");

        chooseTextFileButton.setText("Choose text file");
        chooseTextFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseTextFileButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("OR");

        jLabel5.setText("Enter text to hide: ");

        jLabel1.setText("Choose Cover Image:");

        chooseCoverImageButton.setText("Choose Cover Image");
        chooseCoverImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseCoverImageButtonActionPerformed(evt);
            }
        });

        hideTextButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        hideTextButton.setText("Hide Text");
        hideTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideTextButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Monotype Corsiva", 3, 36)); // NOI18N
        jLabel3.setText("Hybrid Edge Text Encoding");

        textFileLabel.setForeground(new java.awt.Color(140, 56, 104));

        coverImageLabel.setForeground(new java.awt.Color(140, 56, 104));
        coverImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coverImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        hybridImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Original Image ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Hybrid Edge Image");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(coverImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(hybridImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)))
                        .addGap(61, 61, 61)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addComponent(jLabel1)
                                .addGap(50, 50, 50)
                                .addComponent(chooseCoverImageButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(63, 63, 63)
                                .addComponent(secretMessageTextFiled, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(hideTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(251, 251, 251)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(73, 73, 73)
                                .addComponent(chooseTextFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(253, 253, 253))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(chooseTextFileButton))
                        .addGap(42, 42, 42)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chooseCoverImageButton)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secretMessageTextFiled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hideTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(coverImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hybridImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseTextFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseTextFileButtonActionPerformed
        fileChooser.setDialogTitle("Choose a plain Text File");
        TextFileFilter filter = new TextFileFilter();
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            textFile = fileChooser.getSelectedFile();
            String name = textFile.getName();
            textFileLabel.setText(name);
             
            
            try
            {
               // lbl_customer_reg_passport.setIcon(new ImageIcon(filestff.getPath()));
                
                  BufferedReader buff = null;
                          try {
                              String cont= "";
                               buff = new BufferedReader(new FileReader(textFile.getPath()));
                               String str = "\n" +"Text Content :=   ";
                               jTextArea1.append(str);
                               while ((str = buff.readLine()) != null) {
                               jTextArea1.append(str+"\n");
                               cont = str;
                           }
                                StringBuilder sb = new StringBuilder();
                                for (char c : cont.toCharArray())
                                sb.append((int)c);

                                BigInteger mInt = new BigInteger(sb.toString());
                               jTextArea1.append("Ascii value: "+mInt+"");
                               
                                jTextArea1.append("\n");
                               
                               BigInteger myInt = new BigInteger(mInt.toString());
                               String binaryString = myInt.toString(2);
                                jTextArea1.append("Binary value: "+binaryString+"");
                               
                         } catch (IOException e) {
                          } finally {
                            try { in.close(); } catch (Exception ex) { }
                            }

            }
            catch (Exception de)
            {
                  de.printStackTrace();
            }
        }
    }//GEN-LAST:event_chooseTextFileButtonActionPerformed

    private void chooseCoverImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCoverImageButtonActionPerformed
        fileChooser.setDialogTitle("Select an image");
        ImageFileFilter imageFilter = new ImageFileFilter();
        fileChooser.setFileFilter(imageFilter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fileChooser.getSelectedFile();
            String name = openedFile.getName();
            try {
                if (imageFilter.isPNGOrBMPImage(name)) {
                    coverImage = ImageIO.read(openedFile);

                    // converting original image to suitable type
                    BufferedImage currentImage
                    = imageUtility.convertImage(coverImage);
                    if (currentImage != null) {
                        coverImage = currentImage;
                    }
                       coverImageLabel.setIcon(new ImageIcon(new ImageIcon(coverImage).getImage().getScaledInstance(coverImageLabel.getWidth(), coverImageLabel.getHeight(),Image.SCALE_DEFAULT)));
                    coverImageColorModel = coverImage.getColorModel();
                    String str =  "";
                     jTextArea1.append("\n");
                      jTextArea1.append("\n");
                     jTextArea1.append("Image values"+"\n");
                     jTextArea1.append(str+"\n");
                    jTextArea1.append(name + ", size: "
                        + openedFile.length() / 1024 + " KB, "
                        + coverImage.getWidth() + "X"
                        + coverImage.getHeight());
                } else {
                    alert("Please select only .png or .bmp image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
        
                       if (openedFile == null) {
            return;
        }
        try {
            Metadata metadata = ImageMetadataReader.readMetadata(openedFile);
            String metaData = "";
            for (Directory directory : metadata.getDirectories()) {
                for (Tag tag : directory.getTags()) {
                    metaData += tag + "\n";
                }
            }
            jTextArea1.append(metaData);
          //  alert(metaData, "Meta Data");
//            System.out.println("Courtesy: " + 
//                    "https://github.com/drewnoakes/metadata-extractor");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_chooseCoverImageButtonActionPerformed

     private void alert(String message) {
        JOptionPane.showMessageDialog(null, message);
    }
    
    
    private void hideTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideTextButtonActionPerformed
        if (coverImage == null) {
            alert("No cover Image selected");
            return;
        }
        String secretMessage = "";
        if (textFile == null) {
            secretMessage = secretMessageTextFiled.getText();
            if (secretMessage.equals("")) {
                alert("Enter secret message to hide");
                return;
            }
        } else {
            try {

                byte[] encoded = Files.readAllBytes(textFile.toPath());
                secretMessage = new String(encoded);
                //alert("" + secretMessage);
                // System.out.println("" + secretMessage);
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
       
      
      
        
        int bitArray[] = new int[8];
        bitArray[3] = 1;
        encodeText(coverImage, secretMessage, bitArray);
        
        saveImage();
         hybridEdge();
       edgePixel();
       // jFrame1.setVisible(true);
    }//GEN-LAST:event_hideTextButtonActionPerformed
         
           public void edgePixel(){
//                BufferedImage output = JCanny.CannyEdges(coverImage, CANNY_STD_DEV, CANNY_THRESHOLD_RATIO);
//            output = JCanny.edges;
//            currentImage =output;

   try {
                 BufferedImage image = coverImage;
               //  currentImage = originalImage;
                 int x = image.getWidth();
                    int y = image.getHeight();

                    int maxGval = 0;
                    int[][] edgeColors = new int[x][y];
                    int maxGradient = -1;
                   
                     for (int i = 1; i < x - 1; i++) {
                            for (int j = 1; j < y - 1; j++) {

                                int val00 = getGrayScale(image.getRGB(i - 1, j - 1));
                                int val01 = getGrayScale(image.getRGB(i - 1, j));
                                int val02 = getGrayScale(image.getRGB(i - 1, j + 1));

                                int val10 = getGrayScale(image.getRGB(i, j - 1));
                                int val11 = getGrayScale(image.getRGB(i, j));
                                int val12 = getGrayScale(image.getRGB(i, j + 1));

                                int val20 = getGrayScale(image.getRGB(i + 1, j - 1));
                                int val21 = getGrayScale(image.getRGB(i + 1, j));
                                int val22 = getGrayScale(image.getRGB(i + 1, j + 1));

                                int gx =  ((-1 * val00) + (0 * val01) + (1 * val02)) 
                                        + ((-2 * val10) + (0 * val11) + (2 * val12))
                                        + ((-1 * val20) + (0 * val21) + (1 * val22));

                                int gy =  ((-1 * val00) + (-2 * val01) + (-1 * val02))
                                        + ((0 * val10) + (0 * val11) + (0 * val12))
                                        + ((1 * val20) + (2 * val21) + (1 * val22));

                                double gval = Math.sqrt((gx * gx) + (gy * gy));
                                int g = (int) gval;

                                if(maxGradient < g) {
                                    maxGradient = g;
                                }

                                edgeColors[i][j] = g;
                            }
                        }
                  double scale = 255.0 / maxGradient;
                   for (int i = 1; i < x - 1; i++) {
                    for (int j = 1; j < y - 1; j++) {
                        int edgeColor = edgeColors[i][j];
                        edgeColor = (int)(edgeColor * scale);
                        edgeColor = 0xff000000 | (edgeColor << 16) | (edgeColor << 8) | edgeColor;

                       //  System.out.println("Edge color : " + edgeColor);
                        
                        image.setRGB(i, j, edgeColor);
                        imageLabel.setIcon(new ImageIcon(image)); 
                        currentImage = image;
                        
                       
                    }
                }
//                    int bit = image.getRGB(WIDTH, HEIGHT);
//                     bit = bit / 2;
//                  System.out.println("bitsize" + bit);
                   int bit = image.getRGB(WIDTH, HEIGHT);
                         String bitS = Integer.toString(bit);
                        // System.out.println("bitsize" + bitS.substring(1));
                          jTextArea1.append("\n");
                         jTextArea1.append("Sobel Edge Pixel Size: "+bitS.substring(4));
            } catch(Exception e){
                
            }
            
             BufferedImage output = JCanny.CannyEdges(coverImage, CANNY_STD_DEV, CANNY_THRESHOLD_RATIO);
            output = JCanny.edges;
            currentImage =output;
            
            int bit = output.getRGB(HEIGHT, WIDTH);
             String bitS = Integer.toString(bit);
          //   System.out.println("canny bitsize" + bit);
              jTextArea1.append("\n");
              jTextArea1.append("Canny Edge Pixel Size: "+bitS.substring(5));
            
                          try{
                 EdgeDetection fuzzy = new EdgeDetection();
                 fuzzy.detectEdges(coverImage, "Sobel Horizontal Filter");
                  output = fuzzy.getEdgesImage();
                  imageLabel.setIcon(new ImageIcon(output));
                  currentImage = output;
                   bit  = output.getRGB(WIDTH, HEIGHT);
                
                   bitS = Integer.toString(bit);
                 // System.out.println("canny bitsize" + bit);
                   jTextArea1.append("\n");
                   jTextArea1.append("Fuzzy Edge Pixel Size: "+bitS.substring(3));
                  //System.out.println("fuzzy bitsize" + bit);
            }catch(Exception ex){
                ex.printStackTrace();
            }
                         
           } 
    
        public void hybridEdge(){
           try{
               //fuzzy edge starta here   
             //   BufferedImage currentImage;
                 EdgeDetection fuzzy = new EdgeDetection();
                 fuzzy.detectEdges(coverImage, "Sobel Horizontal Filter");
                 BufferedImage   output = fuzzy.getEdgesImage();
                 
                  currentImage =   imageUtility.convertImage(output);
                hybridImageLabel.setIcon(new ImageIcon(new ImageIcon(output).getImage().getScaledInstance(hybridImageLabel.getWidth(), hybridImageLabel.getHeight(),Image.SCALE_DEFAULT)));
                  
                  //canny edge starta here   
//                    output = JCanny.CannyEdges(currentImage, CANNY_STD_DEV, CANNY_THRESHOLD_RATIO);
//                        output = JCanny.edges;
//                        currentImage =output;
//
//                         bit = output.getRGB(WIDTH, HEIGHT);
//                              System.out.println("bitsize" + bit);

               //sobel edge starta here    
                   BufferedImage image = currentImage;
               //  currentImage = originalImage;
                 int x = image.getWidth();
                    int y = image.getHeight();

                    int maxGval = 0;
                    int[][] edgeColors = new int[x][y];
                    int maxGradient = -1;
                   
                     for (int i = 1; i < x - 1; i++) {
                            for (int j = 1; j < y - 1; j++) {

                                int val00 = getGrayScale(image.getRGB(i - 1, j - 1));
                                int val01 = getGrayScale(image.getRGB(i - 1, j));
                                int val02 = getGrayScale(image.getRGB(i - 1, j + 1));

                                int val10 = getGrayScale(image.getRGB(i, j - 1));
                                int val11 = getGrayScale(image.getRGB(i, j));
                                int val12 = getGrayScale(image.getRGB(i, j + 1));

                                int val20 = getGrayScale(image.getRGB(i + 1, j - 1));
                                int val21 = getGrayScale(image.getRGB(i + 1, j));
                                int val22 = getGrayScale(image.getRGB(i + 1, j + 1));

                                int gx =  ((-1 * val00) + (0 * val01) + (1 * val02)) 
                                        + ((-2 * val10) + (0 * val11) + (2 * val12))
                                        + ((-1 * val20) + (0 * val21) + (1 * val22));

                                int gy =  ((-1 * val00) + (-2 * val01) + (-1 * val02))
                                        + ((0 * val10) + (0 * val11) + (0 * val12))
                                        + ((1 * val20) + (2 * val21) + (1 * val22));

                                double gval = Math.sqrt((gx * gx) + (gy * gy));
                                int g = (int) gval;

                                if(maxGradient < g) {
                                    maxGradient = g;
                                }

                                edgeColors[i][j] = g;
                            }
                        }
                  double scale = 255.0 / maxGradient;
                   for (int i = 1; i < x - 1; i++) {
                    for (int j = 1; j < y - 1; j++) {
                        int edgeColor = edgeColors[i][j];
                        edgeColor = (int)(edgeColor * scale);
                        edgeColor = 0xff000000 | (edgeColor << 16) | (edgeColor << 8) | edgeColor;

                       //  System.out.println("Edge color : " + edgeColor);
                        
                        image.setRGB(i, j, edgeColor);
                       
//                        currentImage = imageUtility.convertImage(image);
//                         hybridImageLabel.setIcon(new ImageIcon(new ImageIcon(currentImage).getImage().getScaledInstance(hybridImageLabel.getWidth(), hybridImageLabel.getHeight(),Image.SCALE_DEFAULT))); 
                       
                    }
                }
                         int bit = image.getRGB(WIDTH, HEIGHT);
                         String bitS = Integer.toString(bit);
                       //  System.out.println("bitsize" + bitS.substring(1));
                          jTextArea1.append("\n");
                          jTextArea1.append("Hybrid Edge Pixel Size: "+bitS.substring(2));
            }catch(Exception ex){
                ex.printStackTrace();
            }
      }
    
    public void sobelEdgeDetectionMethod(Image im){
          try {
            BufferedImage image = coverImage;
            //  currentImage = originalImage;
            int x = image.getWidth();
            int y = image.getHeight();

            int maxGval = 0;
            int[][] edgeColors = new int[x][y];
            int maxGradient = -1;

            for (int i = 1; i < x - 1; i++) {
                for (int j = 1; j < y - 1; j++) {

                    int val00 = getGrayScale(image.getRGB(i - 1, j - 1));
                    int val01 = getGrayScale(image.getRGB(i - 1, j));
                    int val02 = getGrayScale(image.getRGB(i - 1, j + 1));

                    int val10 = getGrayScale(image.getRGB(i, j - 1));
                    int val11 = getGrayScale(image.getRGB(i, j));
                    int val12 = getGrayScale(image.getRGB(i, j + 1));

                    int val20 = getGrayScale(image.getRGB(i + 1, j - 1));
                    int val21 = getGrayScale(image.getRGB(i + 1, j));
                    int val22 = getGrayScale(image.getRGB(i + 1, j + 1));

                    int gx =  ((-1 * val00) + (0 * val01) + (1 * val02))
                    + ((-2 * val10) + (0 * val11) + (2 * val12))
                    + ((-1 * val20) + (0 * val21) + (1 * val22));

                    int gy =  ((-1 * val00) + (-2 * val01) + (-1 * val02))
                    + ((0 * val10) + (0 * val11) + (0 * val12))
                    + ((1 * val20) + (2 * val21) + (1 * val22));

                    double gval = Math.sqrt((gx * gx) + (gy * gy));
                    int g = (int) gval;

                    if(maxGradient < g) {
                        maxGradient = g;
                    }

                    edgeColors[i][j] = g;
                }
            }
            double scale = 255.0 / maxGradient;
            for (int i = 1; i < x - 1; i++) {
                for (int j = 1; j < y - 1; j++) {
                    int edgeColor = edgeColors[i][j];
                    edgeColor = (int)(edgeColor * scale);
                    edgeColor = 0xff000000 | (edgeColor << 16) | (edgeColor << 8) | edgeColor;

                    //  System.out.println("Edge color : " + edgeColor);

                   image.setRGB(i, j, edgeColor);
                    // imageLabel.setIcon(new ImageIcon(image));
                    
                }
            }

        } catch(Exception e){
            e.printStackTrace();
        }
    }
    
     public void encodeText(BufferedImage coverImage, 
            String message, int bitArray[]) {
        byte image[] = imageUtility.getByteData(coverImage);
        byte payload[] = message.getBytes();
        int offset = 0;
        int imageLength = image.length;
        boolean data[] = convertToBits(payload);
        // byte cannyedge[] = imageUtility.getByteData(edges);
          
            
       
     //     System.out.println("secret message"+payload );
//           System.out.println(""+image );
        //    System.out.println(""+imageLength );
    //     System.out.println("secret message to bit"+data );
        int dataLength = data.length;
        int dataOverFlag = 0;
        for (int i = 0; i < imageLength && dataOverFlag == 0; i++) {
            for (int j = 7; j >= 0  && dataOverFlag == 0; j--) {
                if (bitArray[j] == 1) {
                    int mask = returnMask(j);
                    image[i] = (byte) ((image[i] & mask));
                    if (data[offset++]) {
                        image[i] = (byte) (image[i] | ~mask);
                    }
                    if (offset >= dataLength) {
                        dataOverFlag = 1;
                    }
                }
            }
        }
    }
     
     
     private int returnMask(int bit) {
        int mask = 0xFF;
        switch (bit) {
            case 0:
                mask = 0xFE;
                break;
            case 1:
                mask = 0xFD;
                break;
            case 2:
                mask = 0xFB;
                break;
            case 3:
                mask = 0xF7;
                break;
            case 4:
                mask = 0xEF;
                break;
            case 5:
                mask = 0xDF;
                break;
            case 6:
                mask = 0xBF;
                break;
            case 7:
                mask = 0x7F;
                break;
        }
        return mask;
    }
     
       private boolean[] convertToBits(byte payload[]) {
        boolean result[] = new boolean[8 * payload.length];
        int offset = 0;
        for (byte b: payload) {
            for (int i = 7; i >= 0; i--) {
                int singleBit = (b >> i) & 1;
                if (singleBit == 1) {
                    result[offset++] = true;
                } else {
                    result[offset++] = false;
                }
            }
        }
        return result;
    }
     
     
     
     
      private void saveImage() {
        if (coverImage == null) {
            return;
        }
        fileChooser.setDialogTitle("Choose a location");
        String oldFileName = openedFile.getName();
        String newFileName = imageUtility.getNewFileName(oldFileName);
        String path = openedFile.getAbsolutePath();
        path = path.substring(0, path.lastIndexOf(File.separator) + 1);
        File file = new File(path + newFileName);
        fileChooser.setSelectedFile(file);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            String name = file.getName();
            if (imageUtility.isImage(name)) {
                imageUtility.saveImage(coverImage, file);
            } else {
                alert("Invalid file name");
            }

        } 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HybridEdgeEncoding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HybridEdgeEncoding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HybridEdgeEncoding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HybridEdgeEncoding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HybridEdgeEncoding().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseCoverImageButton;
    private javax.swing.JButton chooseTextFileButton;
    private javax.swing.JLabel coverImageLabel;
    private javax.swing.JButton hideTextButton;
    private javax.swing.JLabel hybridImageLabel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel imageLabel1;
    private javax.swing.JLabel imageLabel2;
    private javax.swing.JLabel imageLabel3;
    private javax.swing.JLabel imageLabel4;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField secretMessageTextFiled;
    private javax.swing.JLabel textFileLabel;
    // End of variables declaration//GEN-END:variables
}
