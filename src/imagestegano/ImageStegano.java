/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imagestegano;

import data.CustomIndexColorModel;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.IndexColorModel;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import steganography.BitPlane;
import steganography.BitwiseXOR;
import steganography.ColourMap;
import steganography.ImageManipulation;
import utility.ImageUtility;

import com.drew.imaging.ImageMetadataReader;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.Tag;
import java.awt.Dimension;
import java.awt.image.DataBufferByte;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import steganography.AppendedData;
import steganography.CannyEdgeDetector;
import steganography.EdgeDetection;
import steganography.JCanny;
import steganography.PNGCheck;

/**
 *
 * @author tonysoft
 */
public class ImageStegano extends javax.swing.JFrame {

    BufferedImage originalImage;
    BufferedImage currentImage;
    ImageUtility imageUtility;
    BitPlane bitPlane;
    File openedFile;
    BitwiseXOR bitwiseXOR;
    ColourMap colourMap;
    
    // pixel size of original image
    int pixelSize;
    
    /**
     * value of bpcsIndex - 
     * [-8, -1] all plane where -8 is MSB and -1 is LSB
     * [0, 7] blue plane where 0 is MSB and 7 is LSB 
     * [8, 15] green plane where 8 is MSB and 15 is LSB 
     * [16, 23] red plane
     * if alpha channel is present then [0, 7] alpha plane, 0 is MSB and
     * all other planes is shifted by one byte
     * color model is ABGR or BGR (in byte array)
     */
    int bpcsIndex;
    
    // negative index will be used for all plane BitPlane 
    int minBPCSIndex;
    
    // value of colourMapIndex - [0, 7] for 8 different colour maps
    int colourMapIndex;
    
    // value of bitwiseXORIndex [1, 28] (4 * 4 + 4 * 3)
    // see mapping method in BitwiseXOR.java
    int bitwiseXORIndex;
    
    int fuzzyIndex;
    int cannyIndex;
    int sobelIndex;
    CustomIndexColorModel customIndexColorModelObject;
    IndexColorModel customIndexColorModels[];
    int othersIndex;
    ImageManipulation imageManipulation;
    BufferedImage coverImage;
    BufferedImage targetImage;
    File coverImageFile;
    
    CannyEdgeDetector detector = new CannyEdgeDetector();
    
    //Canny parameters
    private static final double CANNY_THRESHOLD_RATIO = .2; //Suggested range .2 - .4
    private static final int CANNY_STD_DEV = 1;             //Range 1-3
    
    /**
     * Creates new form ImageStegano
     */
    public ImageStegano() {
        originalImage = null;
        currentImage = null;
        imageUtility = new ImageUtility();
        bitPlane = new BitPlane();
        bpcsIndex = -9;
        colourMapIndex = -1;
        bitwiseXORIndex = 0;
        bitwiseXOR = new BitwiseXOR();
        colourMap = new ColourMap();
        
        //[-1, -8] all plane BitPlane
        minBPCSIndex = -8;
        
        customIndexColorModelObject = new CustomIndexColorModel();
        customIndexColorModels = 
                customIndexColorModelObject.getIndexColorModelArray();
        othersIndex = 0;
       
        imageManipulation = new ImageManipulation();
        coverImage = null;
        targetImage = null;
        
        initComponents();
        
        // customizing threshold menu (no menu item)
        thresholdMenu.addMenuListener(new MenuListener() {

            @Override
            public void menuSelected(MenuEvent e) {
                showThresholdFrame();
            }

            @Override
            public void menuDeselected(MenuEvent e) {
            }

            @Override
            public void menuCanceled(MenuEvent e) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        hideImageFrame = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        chooseSourceImageButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        chooseTargetImageButton = new javax.swing.JButton();
        coverImageLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        hideImageButton = new javax.swing.JButton();
        targetImageLabel = new javax.swing.JLabel();
        imageHideMethodComboBox = new javax.swing.JComboBox();
        imageEncryptionComboBox = new javax.swing.JComboBox();
        encryptionLabel = new javax.swing.JLabel();
        encryptionTextField = new javax.swing.JTextField();
        resetSelectionButton = new javax.swing.JButton();
        thresholdFrame = new javax.swing.JFrame();
        currentValueLabel = new javax.swing.JLabel();
        thresholdSlider = new javax.swing.JSlider();
        currentThresholdLabel = new javax.swing.JLabel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        imageLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        othersRadioButton = new javax.swing.JRadioButton();
        cannyEdgeRadioButton = new javax.swing.JRadioButton();
        sobelEdgeRadioButton = new javax.swing.JRadioButton();
        fuzzyEdgeRadioButton = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        analyzeMenu = new javax.swing.JMenu();
        metaDataMenuItem = new javax.swing.JMenuItem();
        appendedDataMenuItem = new javax.swing.JMenuItem();
        pngCheckMenuItem = new javax.swing.JMenuItem();
        jCheckBoxMenuItem6 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem5 = new javax.swing.JCheckBoxMenuItem();
        thresholdMenu = new javax.swing.JMenu();
        hideDataMenu = new javax.swing.JMenu();
        jCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();

        fileChooser.setDialogTitle("Choose an image");
        fileChooser.setFileFilter(new imagestegano.ImageFileFilter());

        hideImageFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        hideImageFrame.setTitle("Hide Image");

        jLabel1.setText("Select a carrier Image");

        chooseSourceImageButton.setText("choose");
        chooseSourceImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSourceImageButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Select target image (image to hide)");

        chooseTargetImageButton.setText("choose");
        chooseTargetImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseTargetImageButtonActionPerformed(evt);
            }
        });

        coverImageLabel.setForeground(new java.awt.Color(140, 56, 104));

        jLabel4.setText("Select method");

        jLabel3.setText("Select Encryption option");

        hideImageButton.setText("Hide Image");
        hideImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideImageButtonActionPerformed(evt);
            }
        });

        targetImageLabel.setForeground(new java.awt.Color(140, 56, 104));

        imageHideMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0th bit plane", "1st bit plane", "2nd bit plane", "3rd bit plane" }));

        imageEncryptionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Encryption", "Invert Bits", "Bitwise XOR with upper bits" }));
        imageEncryptionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageEncryptionComboBoxActionPerformed(evt);
            }
        });

        encryptionLabel.setText("No Encryption");

        encryptionTextField.setEditable(false);

        resetSelectionButton.setText("Reset selection");
        resetSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSelectionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hideImageFrameLayout = new javax.swing.GroupLayout(hideImageFrame.getContentPane());
        hideImageFrame.getContentPane().setLayout(hideImageFrameLayout);
        hideImageFrameLayout.setHorizontalGroup(
            hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hideImageFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                        .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(hideImageFrameLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chooseSourceImageButton))
                            .addGroup(hideImageFrameLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chooseTargetImageButton)))
                        .addGap(48, 48, 48))
                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                        .addComponent(coverImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hideImageFrameLayout.createSequentialGroup()
                        .addComponent(targetImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                        .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(hideImageButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(imageEncryptionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(imageHideMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(encryptionTextField))
                            .addComponent(resetSelectionButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(50, 50, 50))
                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                        .addComponent(encryptionLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        hideImageFrameLayout.setVerticalGroup(
            hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hideImageFrameLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(chooseSourceImageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coverImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(chooseTargetImageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(targetImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(imageHideMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageEncryptionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptionLabel)
                    .addComponent(encryptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hideImageButton)
                    .addComponent(resetSelectionButton))
                .addContainerGap())
        );

        thresholdFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        thresholdFrame.setTitle("Threshold (Histogram)");

        currentValueLabel.setText("Current Value:");

        thresholdSlider.setMaximum(255);
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });

        currentThresholdLabel.setText("50");

        javax.swing.GroupLayout thresholdFrameLayout = new javax.swing.GroupLayout(thresholdFrame.getContentPane());
        thresholdFrame.getContentPane().setLayout(thresholdFrameLayout);
        thresholdFrameLayout.setHorizontalGroup(
            thresholdFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thresholdFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentValueLabel)
                .addGap(39, 39, 39)
                .addComponent(currentThresholdLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(thresholdSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        thresholdFrameLayout.setVerticalGroup(
            thresholdFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thresholdFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(thresholdFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentValueLabel)
                    .addComponent(currentThresholdLabel))
                .addGap(31, 31, 31)
                .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ImageStegano Tool");
        setName("ImageStegano"); // NOI18N

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });
        previousButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                previousButtonKeyReleased(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        nextButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nextButtonKeyReleased(evt);
            }
        });

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(imageLabel);

        nameLabel.setText("Open an Image using Ctrl + O or File menu");

        buttonGroup1.add(othersRadioButton);
        othersRadioButton.setText("Hybrid Edge");

        buttonGroup1.add(cannyEdgeRadioButton);
        cannyEdgeRadioButton.setSelected(true);
        cannyEdgeRadioButton.setText("Canny Edge");

        buttonGroup1.add(sobelEdgeRadioButton);
        sobelEdgeRadioButton.setText("Sobel Edge");

        buttonGroup1.add(fuzzyEdgeRadioButton);
        fuzzyEdgeRadioButton.setText("Fuzzy Edge");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cannyEdgeRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sobelEdgeRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fuzzyEdgeRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(othersRadioButton)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(othersRadioButton)
                    .addComponent(cannyEdgeRadioButton)
                    .addComponent(sobelEdgeRadioButton)
                    .addComponent(fuzzyEdgeRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save As");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        analyzeMenu.setText("Analyze");

        metaDataMenuItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        metaDataMenuItem.setText("Meta Data");
        metaDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDataMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(metaDataMenuItem);

        appendedDataMenuItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        appendedDataMenuItem.setText("Appended Data");
        appendedDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appendedDataMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(appendedDataMenuItem);

        pngCheckMenuItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        pngCheckMenuItem.setText("PNG Check");
        pngCheckMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pngCheckMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(pngCheckMenuItem);

        jCheckBoxMenuItem6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jCheckBoxMenuItem6.setText("PNSR Check");
        jCheckBoxMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem6ActionPerformed(evt);
            }
        });
        analyzeMenu.add(jCheckBoxMenuItem6);

        jCheckBoxMenuItem5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jCheckBoxMenuItem5.setText("Decode Hybrid Edge Text");
        jCheckBoxMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem5ActionPerformed(evt);
            }
        });
        analyzeMenu.add(jCheckBoxMenuItem5);

        jMenuBar1.add(analyzeMenu);

        thresholdMenu.setText("Threshold");
        jMenuBar1.add(thresholdMenu);

        hideDataMenu.setText("Hide Data");
        hideDataMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideDataMenuActionPerformed(evt);
            }
        });

        jCheckBoxMenuItem4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jCheckBoxMenuItem4.setText("Hybrid Edge Text Encoding");
        jCheckBoxMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem4ActionPerformed(evt);
            }
        });
        hideDataMenu.add(jCheckBoxMenuItem4);

        jMenuBar1.add(hideDataMenu);

        helpMenu.setText("Help");
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(previousButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextButton)
                .addGap(143, 143, 143))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousButton)
                    .addComponent(nextButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        fileChooser.setDialogTitle("Select an image");
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fileChooser.getSelectedFile();
            String name = openedFile.getName();
            try {
                ImageFileFilter imageFilter = new ImageFileFilter();
                if (imageFilter.isImage(name)) {
                    originalImage = ImageIO.read(openedFile);
                    
                    // will initialize pixelSize variable
                    System.out.println("Original Image Info:");
                    printImageInfo(originalImage);
                    
                    // converting original image to suitable type
                    currentImage = imageUtility.convertImage(originalImage);
                    if (currentImage != null) {
                        originalImage = currentImage;
                        System.out.println("Converted Image Info:");
                        
                        // will ovverride pixelSize variable
                        printImageInfo(originalImage);
                    }
                    
                    imageLabel.setIcon(new ImageIcon(originalImage));
                    nameLabel.setText("Normal Image. Use --> " + 
                            "and <-- key to navigate.");
                } else {
                    alert("Please select an image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
//        if (bitPlaneRadioButton.isSelected()) {
//            if (bpcsIndex <= minBPCSIndex) {
//                bpcsIndex = pixelSize;
//            }
//            bpcsIndex--;
//            manipulateImage();
//        } else if (bitwiseXORRadioButton.isSelected()) {
//            if (bitwiseXORIndex <= 1) {
//                bitwiseXORIndex = 29;
//            }
//            bitwiseXORIndex--;
//            applyBitwiseXOR();
//        } else if (colourMapRadioButton.isSelected()) {
//            if (colourMapIndex <= 0) {
//                colourMapIndex = 8;
//            }
//            colourMapIndex--;
//            applyColourMap();
//        } else
         if (othersRadioButton.isSelected()) {
            if (othersIndex <= 1) {
                othersIndex = 3;
            }
            othersIndex--;
            otherManipulations();
        }else if (cannyEdgeRadioButton.isSelected()) {
            if (othersIndex <= 1) {
                othersIndex = 3;
            }
            othersIndex--;
                    detector.setLowThreshold(1f);
                    detector.setHighThreshold(1.5f);
                     //apply it to an image
                detector.setSourceImage(originalImage);
                detector.process();
                currentImage = detector.getEdgesImage();
                
                 imageLabel.setIcon(new ImageIcon(currentImage));  
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void previousButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_previousButtonKeyReleased
        int keyCode = evt.getKeyCode();
        if (keyCode == 39) {
            nextButton.doClick();
        } else if (keyCode == 37) {
            previousButton.doClick();
        }
    }//GEN-LAST:event_previousButtonKeyReleased

    private void nextButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nextButtonKeyReleased
        int keyCode = evt.getKeyCode();
        if (keyCode == 39) {
            nextButton.doClick();
        } else if (keyCode == 37) {
            previousButton.doClick();
        }
    }//GEN-LAST:event_nextButtonKeyReleased

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
//        if (bitPlaneRadioButton.isSelected()) {
//            if (bpcsIndex >= pixelSize - 1) {
//                bpcsIndex = minBPCSIndex - 1;
//            }
//            bpcsIndex++;
//            manipulateImage();
//        } else if (bitwiseXORRadioButton.isSelected()) {
//            if (bitwiseXORIndex >= 28) {
//                bitwiseXORIndex = 0;
//            }
//            bitwiseXORIndex++;
//            applyBitwiseXOR();
//        }else
     if (fuzzyEdgeRadioButton.isSelected()) {
             if (othersIndex >= 2) {
                othersIndex = 0;
            }
            othersIndex++;
           // fuzzyManipulations();
            try{
                 EdgeDetection fuzzy = new EdgeDetection();
                 fuzzy.detectEdges(originalImage, "Sobel Horizontal Filter");
                 BufferedImage   output = fuzzy.getEdgesImage();
                  imageLabel.setIcon(new ImageIcon(output));
                  currentImage = output;
                  int bit  = output.getRGB(WIDTH, HEIGHT);
                
                  System.out.println("bitsize" + bit);
            }catch(Exception ex){
                ex.printStackTrace();
            }
           
        } 
       else  if (othersRadioButton.isSelected()) {
            if (othersIndex >= 2) {
                othersIndex = 0;
            }
            othersIndex++;
            hybridEdge();
           // currentImage = currentImage;
        }else if (cannyEdgeRadioButton.isSelected()) {
            if (othersIndex >= 2) {
                othersIndex = 0;
            }
            othersIndex++;
//                    detector.setLowThreshold(4f);
//                    detector.setHighThreshold(8f);
//                     //apply it to an image
//                detector.setSourceImage(originalImage);
//                detector.process();
//                currentImage = detector.getEdgesImage();
//               // byte imagebyte[] = imageUtility.getByteData(currentImage);
//                System.out.println("Edge color : " + currentImage);
//                 imageLabel.setIcon(new ImageIcon(currentImage));    
                 
              BufferedImage output = JCanny.CannyEdges(originalImage, CANNY_STD_DEV, CANNY_THRESHOLD_RATIO);
            output = JCanny.edges;
            currentImage =output;
            
            int bit = output.getRGB(HEIGHT, WIDTH);
                  System.out.println("bitsize" + bit);
//                    int value = 110;
//                    currentThresholdLabel.setText((String.valueOf(value)));
//                    currentImage = imageUtility.copyImage(originalImage);
//                    currentImage = imageUtility.thresholdImage(currentImage, value);
                    imageLabel.setIcon(new ImageIcon(output));
                 
        }else if (sobelEdgeRadioButton.isSelected()) {
            if (othersIndex >= 2) {
                sobelIndex = 0;
            }
            sobelIndex++;
            try {
                 BufferedImage image = originalImage;
               //  currentImage = originalImage;
                 int x = image.getWidth();
                    int y = image.getHeight();

                    int maxGval = 0;
                    int[][] edgeColors = new int[x][y];
                    int maxGradient = -1;
                   
                     for (int i = 1; i < x - 1; i++) {
                            for (int j = 1; j < y - 1; j++) {

                                int val00 = getGrayScale(image.getRGB(i - 1, j - 1));
                                int val01 = getGrayScale(image.getRGB(i - 1, j));
                                int val02 = getGrayScale(image.getRGB(i - 1, j + 1));

                                int val10 = getGrayScale(image.getRGB(i, j - 1));
                                int val11 = getGrayScale(image.getRGB(i, j));
                                int val12 = getGrayScale(image.getRGB(i, j + 1));

                                int val20 = getGrayScale(image.getRGB(i + 1, j - 1));
                                int val21 = getGrayScale(image.getRGB(i + 1, j));
                                int val22 = getGrayScale(image.getRGB(i + 1, j + 1));

                                int gx =  ((-1 * val00) + (0 * val01) + (1 * val02)) 
                                        + ((-2 * val10) + (0 * val11) + (2 * val12))
                                        + ((-1 * val20) + (0 * val21) + (1 * val22));

                                int gy =  ((-1 * val00) + (-2 * val01) + (-1 * val02))
                                        + ((0 * val10) + (0 * val11) + (0 * val12))
                                        + ((1 * val20) + (2 * val21) + (1 * val22));

                                double gval = Math.sqrt((gx * gx) + (gy * gy));
                                int g = (int) gval;

                                if(maxGradient < g) {
                                    maxGradient = g;
                                }

                                edgeColors[i][j] = g;
                            }
                        }
                  double scale = 255.0 / maxGradient;
                   for (int i = 1; i < x - 1; i++) {
                    for (int j = 1; j < y - 1; j++) {
                        int edgeColor = edgeColors[i][j];
                        edgeColor = (int)(edgeColor * scale);
                        edgeColor = 0xff000000 | (edgeColor << 16) | (edgeColor << 8) | edgeColor;

                       //  System.out.println("Edge color : " + edgeColor);
                        
                        image.setRGB(i, j, edgeColor);
                        imageLabel.setIcon(new ImageIcon(image)); 
                        currentImage = image;
                        
                       
                    }
                }
                    int bit = image.getRGB(WIDTH, HEIGHT);
                     bit = bit / 2;
                  System.out.println("bitsize" + bit);
                 
            } catch(Exception e){
                
            }
            
                 

                    
                  
        }
    }//GEN-LAST:event_nextButtonActionPerformed

      public static int  getGrayScale(int rgb) {
        int r = (rgb >> 16) & 0xff;
        int g = (rgb >> 8) & 0xff;
        int b = (rgb) & 0xff;

        //from https://en.wikipedia.org/wiki/Grayscale, calculating luminance
        int gray = (int)(0.2126 * r + 0.7152 * g + 0.0722 * b);
        //int gray = (r + g + b) / 3;

        return gray;
    }
    
      public void hybridEdge(){
           try{
               //fuzzy edge starta here   
                 EdgeDetection fuzzy = new EdgeDetection();
                 fuzzy.detectEdges(originalImage, "Sobel Horizontal Filter");
                 BufferedImage   output = fuzzy.getEdgesImage();
                  imageLabel.setIcon(new ImageIcon(output));
                  currentImage = output;
                 
                  
                  //canny edge starta here   
//                    output = JCanny.CannyEdges(currentImage, CANNY_STD_DEV, CANNY_THRESHOLD_RATIO);
//                        output = JCanny.edges;
//                        currentImage =output;
//
//                         bit = output.getRGB(WIDTH, HEIGHT);
//                              System.out.println("bitsize" + bit);

               //sobel edge starta here    
                   BufferedImage image = currentImage;
               //  currentImage = originalImage;
                 int x = image.getWidth();
                    int y = image.getHeight();

                    int maxGval = 0;
                    int[][] edgeColors = new int[x][y];
                    int maxGradient = -1;
                   
                     for (int i = 1; i < x - 1; i++) {
                            for (int j = 1; j < y - 1; j++) {

                                int val00 = getGrayScale(image.getRGB(i - 1, j - 1));
                                int val01 = getGrayScale(image.getRGB(i - 1, j));
                                int val02 = getGrayScale(image.getRGB(i - 1, j + 1));

                                int val10 = getGrayScale(image.getRGB(i, j - 1));
                                int val11 = getGrayScale(image.getRGB(i, j));
                                int val12 = getGrayScale(image.getRGB(i, j + 1));

                                int val20 = getGrayScale(image.getRGB(i + 1, j - 1));
                                int val21 = getGrayScale(image.getRGB(i + 1, j));
                                int val22 = getGrayScale(image.getRGB(i + 1, j + 1));

                                int gx =  ((-1 * val00) + (0 * val01) + (1 * val02)) 
                                        + ((-2 * val10) + (0 * val11) + (2 * val12))
                                        + ((-1 * val20) + (0 * val21) + (1 * val22));

                                int gy =  ((-1 * val00) + (-2 * val01) + (-1 * val02))
                                        + ((0 * val10) + (0 * val11) + (0 * val12))
                                        + ((1 * val20) + (2 * val21) + (1 * val22));

                                double gval = Math.sqrt((gx * gx) + (gy * gy));
                                int g = (int) gval;

                                if(maxGradient < g) {
                                    maxGradient = g;
                                }

                                edgeColors[i][j] = g;
                            }
                        }
                  double scale = 255.0 / maxGradient;
                   for (int i = 1; i < x - 1; i++) {
                    for (int j = 1; j < y - 1; j++) {
                        int edgeColor = edgeColors[i][j];
                        edgeColor = (int)(edgeColor * scale);
                        edgeColor = 0xff000000 | (edgeColor << 16) | (edgeColor << 8) | edgeColor;

                       //  System.out.println("Edge color : " + edgeColor);
                        
                        image.setRGB(i, j, edgeColor);
                        imageLabel.setIcon(new ImageIcon(image)); 
                        currentImage = image;
                        
                       
                    }
                }
                         int bit = image.getRGB(WIDTH, HEIGHT);
                         String bitS = Integer.toString(bit);
                         System.out.println("bitsize" + bitS.substring(1));
            }catch(Exception ex){
                ex.printStackTrace();
            }
      }
      
          public static int[][] convertToArray(BufferedImage image)
            {

                if (image == null || image.getWidth() == 0 || image.getHeight() == 0)
                    return null;

                // This returns bytes of data starting from the top left of the bitmap
                // image and goes down.
                // Top to bottom. Left to right.
                final byte[] pixels = ((DataBufferByte) image.getRaster()
                        .getDataBuffer()).getData();

                final int width = image.getWidth();
                final int height = image.getHeight();

                int[][] result = new int[height][width];

                boolean done = false;
                boolean alreadyWentToNextByte = false;
                int byteIndex = 0;
                int row = 0;
                int col = 0;
                int numBits = 0;
                byte currentByte = pixels[byteIndex];
                while (!done)
                {
                    alreadyWentToNextByte = false;

                    result[row][col] = (currentByte & 0x80) >> 7;
                    currentByte = (byte) (((int) currentByte) << 1);
                    numBits++;

                    if ((row == height - 1) && (col == width - 1))
                    {
                        done = true;
                    }
                    else
                    {
                        col++;

                        if (numBits == 8)
                        {
                            currentByte = pixels[++byteIndex];
                            numBits = 0;
                            alreadyWentToNextByte = true;
                        }

                        if (col == width)
                        {
                            row++;
                            col = 0;

                            if (!alreadyWentToNextByte)
                            {
                                currentByte = pixels[++byteIndex];
                                numBits = 0;
                            }
                        }
                    }
                }

                return result;
            }
      
    
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        if (currentImage == null) {
            return;
        }
        fileChooser.setDialogTitle("Choose a location");
        String oldFileName = openedFile.getName();
        String newFileName = imageUtility.getNewFileName(oldFileName);
        String path = openedFile.getAbsolutePath();
        path = path.substring(0, path.lastIndexOf(File.separator) + 1);
        File file = new File(path + newFileName);
        fileChooser.setSelectedFile(file);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            String name = file.getName();
            if (imageUtility.isImage(name)) {
                imageUtility.saveImage(currentImage, file);
            } else {
                alert("Invalid file name");
            }
            
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void hideImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideImageButtonActionPerformed
        if (coverImage == null) {
            alert("Please select cover image");
            return;
        }
        if (targetImage == null) {
            alert("Please select an image to hide");
            return;
        }
        int lsb = imageHideMethodComboBox.getSelectedIndex();
        int encryption = imageEncryptionComboBox.getSelectedIndex();        

        // No encryption
        if (encryption == 0) {
            bitPlane.hideImage(coverImage, targetImage, lsb, false);
        } else if (encryption == 1) {
            // invert bits
            bitPlane.hideImage(coverImage, targetImage, lsb, true);
        } else if (encryption == 2) {
            // Bitwise XOR with upper bits
            try {
                int upperBit = Integer.parseInt(encryptionTextField.getText());
                if (upperBit >= 4 && upperBit <= 7) {
                    bitPlane.hideImage(coverImage, targetImage, lsb, upperBit);
                } else {
                    alert("Enter upper bit between 4 to 7 both inclusive");
                    return;
                }
            } catch(Exception e) {
                alert("Enter upper bit between 4 to 7 both inclusive");
                return;
            }
        }
        saveSteganoImage(coverImage, coverImageFile);
    }//GEN-LAST:event_hideImageButtonActionPerformed

    private void chooseSourceImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSourceImageButtonActionPerformed
        fileChooser.setDialogTitle("Select a cover image");
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = coverImageFile = fileChooser.getSelectedFile();
            String name = openedFile.getName();
            try {
                ImageFileFilter imageFilter = new ImageFileFilter();
                if (imageFilter.isPNGOrBMPImage(name)) {
                    coverImage = ImageIO.read(openedFile);
                    
                    // converting cover image to suitable type
                    BufferedImage temp = imageUtility.convertImage(coverImage);
                    
                    if (temp != null) {
                        coverImage = temp;
                    }
                    coverImageLabel.setText(name + ", size: " + 
                            openedFile.length() / 1024 + " KB, " +
                            coverImage.getWidth() + "X" +
                            coverImage.getHeight());
                } else {
                    alert("Please select only .png or .bmp image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        printResizeImageInfo();
        
    }//GEN-LAST:event_chooseSourceImageButtonActionPerformed

    private void chooseTargetImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseTargetImageButtonActionPerformed
        fileChooser.setDialogTitle("Select the target image");
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fileChooser.getSelectedFile();
            String name = openedFile.getName();
            try {
                ImageFileFilter imageFilter = new ImageFileFilter();
                if (imageFilter.isImage(name)) {
                    targetImage = ImageIO.read(openedFile);
                    
                    // converting cover image to suitable type
                    BufferedImage temp = imageUtility.convertImage(targetImage);
                    
                    if (temp != null) {
                        targetImage = temp;
                    }
                    targetImageLabel.setText(name + ", size: " + 
                            openedFile.length() / 1024 + " KB, " +
                            targetImage.getWidth() + "X" +
                            targetImage.getHeight());
                } else {
                    alert("Please select an image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        printResizeImageInfo();
    }//GEN-LAST:event_chooseTargetImageButtonActionPerformed

    private void imageEncryptionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageEncryptionComboBoxActionPerformed
        String selectedItem = 
                imageEncryptionComboBox.getSelectedItem().toString();
        if (selectedItem.equals("Bitwise XOR with upper bits")) {
            encryptionLabel.setText("Which upper bit (between 4-7)?");
            encryptionTextField.setEditable(true);
        } else if (selectedItem.equals("Invert Bits")) {
            encryptionLabel.setText("Bits will be inverted");
            encryptionTextField.setEditable(false);
        } else if (selectedItem.equals("No Encryption")) {
            encryptionLabel.setText("No Encryption");
            encryptionTextField.setEditable(false);
        }
    }//GEN-LAST:event_imageEncryptionComboBoxActionPerformed

    private void resetSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSelectionButtonActionPerformed
        coverImage = null;
        targetImage = null;
        coverImageLabel.setText(null);
        targetImageLabel.setText(null);
    }//GEN-LAST:event_resetSelectionButtonActionPerformed

    private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSliderStateChanged
        int value = (int) thresholdSlider.getValue();
        currentThresholdLabel.setText((String.valueOf(value)));
        currentImage = imageUtility.copyImage(originalImage);
        currentImage = imageUtility.thresholdImage(currentImage, value);
        imageLabel.setIcon(new ImageIcon(currentImage));
    }//GEN-LAST:event_thresholdSliderStateChanged

    private void metaDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaDataMenuItemActionPerformed
        if (openedFile == null) {
            return;
        }
        try {
            Metadata metadata = ImageMetadataReader.readMetadata(openedFile);
            String metaData = "";
            for (Directory directory : metadata.getDirectories()) {
                for (Tag tag : directory.getTags()) {
                    metaData += tag + "\n";
                }
            }
            alert(metaData, "Meta Data");
//            System.out.println("Courtesy: " + 
//                    "https://github.com/drewnoakes/metadata-extractor");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_metaDataMenuItemActionPerformed

    private void pngCheckMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pngCheckMenuItemActionPerformed
        if (openedFile == null) {
            return;
        }
        try {
            InputStream inputStream = new FileInputStream(openedFile);
            DataInputStream in = new DataInputStream(inputStream);
            PNGCheck pngCheck = new PNGCheck();
            if (pngCheck.isPNG(in)) {
                String message = pngCheck.getHiddenData(in);
                if (message != "") {
                    alert(message, "Hidden data found");
                } else {
                    alert("No hidden data found");
                }
            } else {
                alert("Not a png image");
            }
            in.close();
            inputStream.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_pngCheckMenuItemActionPerformed

    private void appendedDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appendedDataMenuItemActionPerformed
        if (openedFile == null) {
            return;
        }
        String imageName = openedFile.getName();
        String imageType = imageUtility.getImageType(imageName);
        AppendedData appendedData = new AppendedData();
        try {
            InputStream inputStream = new FileInputStream(openedFile);
            DataInputStream in = new DataInputStream(inputStream);
            if (imageType.equals("PNG")) {
                String data = appendedData.getPNGAppendedData(in);
                if (data.equals("")) {
                    alert("No Appended data found");
                } else {
                    alert(data, "Appended Data");
                }
            } else if (imageType.equals("JPEG")) {
                // Not working 
                /*String data = appendedData.getJPEGAppendedData(in);
                if (data.equals("")) {
                    alert("No Appended data found");
                } else {
                    alert(data, "Appended Data");
                }*/
            } else if (imageType.equals("BMP")) {
                String data = appendedData.getBMPAppendedData(in);
                if (data.equals("")) {
                    alert("No Appended data found");
                } else {
                    alert(data, "Appended Data");
                }
            }
            in.close();
            inputStream.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_appendedDataMenuItemActionPerformed

    private void hideDataMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideDataMenuActionPerformed
        new SobelEdge().setVisible(true);
    }//GEN-LAST:event_hideDataMenuActionPerformed

    private void jCheckBoxMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem4ActionPerformed
        new HybridEdgeEncoding().setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem4ActionPerformed

    private void jCheckBoxMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem5ActionPerformed
      new ExtractHybridTxt().setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem5ActionPerformed

    private void jCheckBoxMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem6ActionPerformed
        ImagePixelBit edgeDetection = new ImagePixelBit();
        edgeDetection.printEdgesTest(currentImage, true, false, currentImage.getHeight(), currentImage.getWidth());
    }//GEN-LAST:event_jCheckBoxMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageStegano().setVisible(true);
            }
        });
    }
    
    private void applySinglePlaneBPCS() {
        if (originalImage != null) {
            currentImage = imageUtility.copyImage(originalImage);
            bitPlane.singlePlane(currentImage, bpcsIndex, pixelSize);
            imageLabel.setIcon(new ImageIcon(currentImage));
            int bitPlaneCode = bpcsIndex / 8;
            String bitPlaneName = "Alpha";
            
            // checking if alpha channel is absent
            if (pixelSize <= 24) {
                bitPlaneCode += 1;
            }
            switch(bitPlaneCode) {
                case 1: 
                    bitPlaneName = "Black";
                    break;
                case 2:
                    bitPlaneName = "White";
                    break;
//                case 3:
//                    bitPlaneName = "Red";
//                    break;
            }
            nameLabel.setText(bitPlaneName + " plane: " + 
                    (7 - (bpcsIndex % 8)) + "th bit");
        }
    }
    
    private void manipulateImage() {
        if (bpcsIndex >= 0) {
            applySinglePlaneBPCS();
        } else if (bpcsIndex >= minBPCSIndex) {
            applyAllPlaneBPCS();
        }
    }
    
    private void applyAllPlaneBPCS() {
        if (originalImage != null) {
            currentImage = imageUtility.copyImage(originalImage);
            bitPlane.allPlane(currentImage, bpcsIndex, pixelSize);
            imageLabel.setIcon(new ImageIcon(currentImage));
            nameLabel.setText("All plane: " + ((bpcsIndex * -1) - 1) + "th bit");
        }
    }
    
    private void applyBitwiseXOR() {
        if (originalImage != null) {
            currentImage = imageUtility.copyImage(originalImage);
            bitwiseXOR.xor(currentImage, bitwiseXORIndex, pixelSize, nameLabel);
            imageLabel.setIcon(new ImageIcon(currentImage));
        }
    }
    
    private void printImageInfo(BufferedImage image) {
        System.out.println("Image Type: " + image.getType());
        ColorModel colorModel = image.getColorModel();
        pixelSize = colorModel.getPixelSize();
        System.out.println("Pixel size: " + pixelSize);
        System.out.println("Alpha channel present: "
                + colorModel.hasAlpha());
    }
    
    private void applyColourMap() {
        if (originalImage != null) {
            currentImage = imageUtility.copyImage(originalImage);
            currentImage = colourMap.changeColourMap(currentImage, 
                    customIndexColorModels[colourMapIndex]);
            if (currentImage != null) {
                nameLabel.setText("Colour Map: " + colourMapIndex);
                imageLabel.setIcon(new ImageIcon(currentImage));
            } else {
                nameLabel.setText("Not an indexed image");
            }
        }
    }
    
    private void otherManipulations() {
        if (originalImage == null) {
            return;
        }
        currentImage = imageUtility.copyImage(originalImage);
        switch (othersIndex) {
            case 1: {
                imageManipulation.convertToGrayscale(currentImage);
                nameLabel.setText("Hybrid Edge");
                break;
            }
            case 2: {
                imageManipulation.invertImage(currentImage, pixelSize);
                nameLabel.setText("");
                break;
            }
        }
        imageLabel.setIcon(new ImageIcon(currentImage));
    }
    
       private void fuzzyManipulations() {
        if (originalImage == null) {
            return;
        }
        currentImage = imageUtility.copyImage(originalImage);
        switch (othersIndex) {
            case 1: {
                imageManipulation.convertToFuzzyscale(currentImage);
                nameLabel.setText("Hybrid Edge");
                break;
            }
            case 2: {
                imageManipulation.invertImage(currentImage, pixelSize);
                nameLabel.setText("");
                break;
            }
        }
        imageLabel.setIcon(new ImageIcon(currentImage));
    }
    
    private void alert(String message) {
        JOptionPane.showMessageDialog(null, message);
    }
    
    private void saveSteganoImage(BufferedImage steganoImage, 
            File steganoImageFile) {
        fileChooser.setDialogTitle("Choose a location");
        String oldFileName = steganoImageFile.getName();
        String newFileName = imageUtility.getNewFileName(oldFileName);
        String path = steganoImageFile.getAbsolutePath();
        path = path.substring(0, path.lastIndexOf(File.separator) + 1);
        File file = new File(path + newFileName);
        fileChooser.setSelectedFile(file);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            String name = file.getName();
            if (imageUtility.isImage(name)) {
                imageUtility.saveImage(steganoImage, file);
            } else {
                alert("Invalid file name");
            }

        }
    }
    
    private void showThresholdFrame() {
        if (originalImage != null) {
            currentImage = imageUtility.copyImage(originalImage);
            ColorModel colorModel = currentImage.getColorModel();
            if (colorModel instanceof IndexColorModel) {
                nameLabel.setText("Not applicable for indexed image");
                return;
            }
            thresholdFrame.setBounds(0, 0, 400, 148);
            thresholdFrame.setVisible(true);
            currentImage = imageUtility.thresholdImage(currentImage, 50);
            imageLabel.setIcon(new ImageIcon(currentImage));
        }
    }
    
    private void printResizeImageInfo() {
        if (coverImage != null && targetImage != null) {
            int coverWidth = coverImage.getWidth();
            int coverHeight = coverImage.getHeight();
            int targetWidth = targetImage.getWidth();
            int targetHeight = targetImage.getHeight();
            if (coverWidth == targetWidth && coverHeight == targetHeight) {
                return;
            }
            alert("Dimensions not equal. Image(s) will be cropped");
            int requiredWidth = (coverWidth < targetWidth ? coverWidth :
                    targetWidth);
            int requiredHeight = (coverHeight < targetHeight ? coverHeight :
                    targetHeight);
            coverImage = 
                    imageUtility.cropImage(coverImage, requiredWidth, requiredHeight);
            targetImage = 
                    imageUtility.cropImage(targetImage, requiredWidth, requiredHeight);
            
        }
    }
    
    private void alert(String message, String title) {
        JTextArea textArea = new JTextArea(message);
        JScrollPane scrollPane = new JScrollPane(textArea);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        scrollPane.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scrollPane, title,
                JOptionPane.INFORMATION_MESSAGE);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu analyzeMenu;
    private javax.swing.JMenuItem appendedDataMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton cannyEdgeRadioButton;
    private javax.swing.JButton chooseSourceImageButton;
    private javax.swing.JButton chooseTargetImageButton;
    private javax.swing.JLabel coverImageLabel;
    private javax.swing.JLabel currentThresholdLabel;
    private javax.swing.JLabel currentValueLabel;
    private javax.swing.JLabel encryptionLabel;
    private javax.swing.JTextField encryptionTextField;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButton fuzzyEdgeRadioButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu hideDataMenu;
    private javax.swing.JButton hideImageButton;
    private javax.swing.JFrame hideImageFrame;
    private javax.swing.JComboBox imageEncryptionComboBox;
    private javax.swing.JComboBox imageHideMethodComboBox;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem5;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem metaDataMenuItem;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JRadioButton othersRadioButton;
    private javax.swing.JMenuItem pngCheckMenuItem;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton resetSelectionButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JRadioButton sobelEdgeRadioButton;
    private javax.swing.JLabel targetImageLabel;
    private javax.swing.JFrame thresholdFrame;
    private javax.swing.JMenu thresholdMenu;
    private javax.swing.JSlider thresholdSlider;
    // End of variables declaration//GEN-END:variables
}
